//Ph√©p to√°n ƒë·ªïi ch·ªó: L√† ph√©p to√°n ƒë·∫£o gi√° tr·ªã 2 bi·∫øn
void swap(datatype &a, datatype &b) {
datatype temp = a; //datatype-ki·ªÉu d·ªØ li·ªáu c·ªßa ph·∫ßn t·ª≠
    a = b;
    b = temp;
}
//Ph√©p to√°n so s√°nh: Tr·∫£ v·ªÅ true n·∫øu a > b v√† tr·∫£ v·ªÅ false cho tr∆∞·ªùng h·ª£p ng∆∞·ª£c l·∫°i.
compare(datatype a, datatype b) {
    if (a > b) {
        return true;
    } else {
        return false;
    }
}
//S·∫Øp x·∫øp ch√®n (Insertion Sort)
void insertionSort(int a[], int array_size) {
    int i, j, last;
    for (i=1; i < array_size; i++) {
        last = a[i];
        j = i;
    while ((j > 0) && (a[j-1] > last)) {
        a[j] = a[j-1];
        j = j - 1; }
        a[j] = last;
    } // end for
} // end of isort
//S·∫Øp x·∫øp l·ª±a ch·ªçn (Selection Sort)
void selectionSort(int a[], int n){
    int i, j, min, temp;
    for (i = 0; i < n-1; i++) {
        min = i;
        for (j = i+1; j < n; j++){
            if (a[j] < a[min]) min = j;
        }
        swap(a[i], a[min]);
    }
}
//S·∫Øp x·∫øp n·ªïi b·ªçt (Bubble Sort)
void bubbleSort(int a[], int n){
    int i, j;
    for (i = (n-1); i >= 0; i--) {
        for (j = 1; j <= i; j++){
            if (a[j-1] > a[j])
            swap(a[j-1],a[j]);
        }
    }
} 
//S·∫Øp x·∫øp tr·ªôn (merge sort) l√† m·ªôt thu·∫≠t to√°n s·∫Øp x·∫øp lo·∫°i so s√°nh
MERGE-SORT(A, p, r)
    if p < r 
        then q ‚Üê (p + r)/2 // Chia (Divide)
            MERGE-SORT(A, p, q) // Tr·ªã (Conquer)
            MERGE-SORT(A, q + 1, r) // Tr·ªã (Conquer)
            MERGE(A, p, q, r) // T·ªï h·ª£p (Combine)
    endif
//Gi·∫£ s·ª≠ c√≥ hai d√£y ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp L[1..ùëõ1] v√† R[1..n2]. Ta c√≥ th·ªÉ tr·ªôn ch√∫ng l·∫°i th√†nh m·ªôt d√£y m·ªõi M[1..n1+n2] ƒë∆∞·ª£c s·∫Øp x·∫øp theo c√°ch sau:  
//Khi ƒë√≥, ta s·∫Ω thu ƒë∆∞·ª£c d√£y c·∫ßn t√¨m.
MERGE(M, p, q, r)
    // Sao n1 ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n v√†o L[1 . . n1] v√† n2 ph·∫ßn t·ª≠ ti·∫øp theo v√†o R[1 . . n2]
    // L[n1 + 1] ‚Üê infty; R[n2 + 1] ‚Üê infty
    i ‚Üê 1; j ‚Üê 1
    for k ‚Üê p to r do
        if L[ i ] ‚â§ R[ j ]
        then
            M[k] ‚Üê L[ i ]
            i ‚Üêi + 1
        else
            M[k] ‚Üê R[ j ]
            j ‚Üê j + 1
//Quick Sort (QS)
  Quick-Sort(A, Left, Right)
    if (Left < Right ) {
        Pivot = Partition(A, Left, Right);
        Quick-Sort(A, Left, Pivot ‚Äì 1);
        Quick-Sort(A, Pivot + 1, Right); }
//Heap (ƒë·ªëng) l√† c√¢y nh·ªã ph√¢n g·∫ßn ho√†n ch·ªânh c√≥ hai t√≠nh ch·∫•t:
// T√≠nh c·∫•u tr√∫c (Structural property): t·∫•t c·∫£ c√°c m·ª©c ƒë·ªÅu ƒë·∫ßy ƒë·ªß node con, ngo·∫°i tr·ª´ m·ª©c cu·ªëi c√πng. M·ª©c cu·ªëi ƒë∆∞·ª£c ƒëi·ªÅn t·ª´ tr√°i sang ph·∫£i.
// T√≠nh c√≥ th·ª© t·ª± hay t√≠nh ch·∫•t ƒë·ªëng (heap property): v·ªõi m·ªói n√∫t x, c√≥ Parent(x) ‚â• x.
// Bi·ªÉu di·ªÖn ƒë·ªëng d∆∞·ªõi d·∫°ng m·∫£ng, ta c√≥:

// G·ªëc c·ªßa c√¢y l√† A[1]
// Con tr√°i c·ªßa A[i] l√† A[2i]*
// Con ph·∫£i c·ªßa A[i] l√† A[2i + 1]*
// Cha c·ªßa A[i] l√† A[ ÔÉ´i/2ÔÉª ]
// S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·ªßa heap l√† Heapsize[A] ‚â§ length[A]
// Ph√¢n lo·∫°i: C√≥ 2 lo·∫°i

// Max-heaps (Ph·∫ßn t·ª≠ l·ªõn nh·∫•t ·ªü g·ªëc): v·ªõi m·ªçi n√∫t i, ngo·∫°i tr·ª´ g·ªëc: A[parent(i)] ‚â• A[i]
// Min-heaps (Ph·∫ßn t·ª≠ nh·ªè nh·∫•t ·ªü g·ªëc): v·ªõi m·ªçi n√∫t i, ngo·∫°i tr·ª´ g·ªëc: A[parent(i)] ‚â§ A[i]
Max-Heapify(A, i, n)
    // n = heapsize[A]
    l ‚Üê left-child(i); r ‚Üê right-child(i);
    if (l ‚â§ n) and (A[l] > A[i])
        then largest ‚Üê l
        else largest ‚Üê i
    if (r ‚â§ n) and (A[r] > A[largest])
        then largest ‚Üê r
    if largest != i
        then Exchange(A[i],A[largest])
    Max-Heapify(A,largest,n)
//Thu·∫≠t to√°n Heapsort
Build-Max-Heap(A)
    n = length[A]
    for i ‚Üê n/2 downto 1
        do Max-Heappify(A, i, n)



